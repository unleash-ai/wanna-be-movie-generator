extends layout

block content
  h1 Video Gallery
  p.subtitle Explore and manage your uploaded videos
  
  .gallery-container
    .gallery-header
      button.btn-primary(onclick="window.location.href='/'") ← Back to Upload
      .search-box
        input#searchInput(type="text", placeholder="Search videos...", oninput="filterVideos()")
    
    .videos-grid#videosGrid
      // Videos will be loaded here dynamically
    
    .loading-spinner#loadingSpinner
      .spinner
      p Loading videos...
    
    .empty-state#emptyState(style="display: none;")
      .empty-icon 📹
      h3 No videos found
      p Upload your first video to get started!
      button.btn-primary(onclick="window.location.href='/'") Upload Video
  
  style.
    .gallery-container {
      width: 100%;
      max-width: 1200px;
      margin: 0 auto;
    }
    
    .gallery-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      gap: 1rem;
    }
    
    .search-box input {
      padding: 0.75rem 1rem;
      border: 1px solid rgba(255,255,255,0.3);
      border-radius: 25px;
      background: rgba(255,255,255,0.1);
      color: white;
      font-size: 1rem;
      min-width: 250px;
      backdrop-filter: blur(10px);
    }
    
    .search-box input::placeholder {
      color: rgba(255,255,255,0.7);
    }
    
    .search-box input:focus {
      outline: none;
      border-color: rgba(255,255,255,0.5);
      background: rgba(255,255,255,0.2);
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 25px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-block;
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
    }
    
    .videos-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 2rem;
      margin-bottom: 2rem;
    }
    
    .video-card {
      background: rgba(255, 255, 255, 0.95);
      border-radius: 15px;
      overflow: hidden;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
      cursor: pointer;
    }
    
    .video-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 15px 40px rgba(0, 0, 0, 0.2);
    }
    
    .video-thumbnail {
      width: 100%;
      height: 200px;
      background: #f0f0f0;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 3rem;
      color: #ccc;
      position: relative;
    }
    
    .video-info {
      padding: 1.5rem;
    }
    
    .video-title {
      font-size: 1.1rem;
      font-weight: 600;
      color: #333;
      margin-bottom: 0.5rem;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
    
    .video-meta {
      display: flex;
      justify-content: space-between;
      align-items: center;
      color: #666;
      font-size: 0.9rem;
      margin-bottom: 1rem;
    }
    
    .video-actions {
      display: flex;
      gap: 0.5rem;
    }
    
    .btn-small {
      padding: 0.4rem 0.8rem;
      border: none;
      border-radius: 15px;
      font-size: 0.8rem;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .btn-view {
      background: #667eea;
      color: white;
    }
    
    .btn-delete {
      background: #ef4444;
      color: white;
    }
    
    .btn-small:hover {
      transform: translateY(-1px);
      opacity: 0.9;
    }
    
    .loading-spinner {
      text-align: center;
      padding: 3rem;
      color: white;
    }
    
    .spinner {
      width: 50px;
      height: 50px;
      border: 4px solid rgba(255,255,255,0.3);
      border-top: 4px solid white;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin: 0 auto 1rem;
    }
    
    .empty-state {
      text-align: center;
      padding: 4rem 2rem;
      color: white;
    }
    
    .empty-icon {
      font-size: 4rem;
      margin-bottom: 1rem;
    }
    
    .empty-state h3 {
      margin-bottom: 0.5rem;
    }
    
    .empty-state p {
      margin-bottom: 2rem;
      opacity: 0.8;
    }
    
    @media (max-width: 768px) {
      .gallery-header {
        flex-direction: column;
        align-items: stretch;
      }
      
      .search-box input {
        min-width: auto;
        width: 100%;
      }
      
      .videos-grid {
        grid-template-columns: 1fr;
      }
    }
  
  script.
    let allVideos = [];
    
    // Load videos on page load
    document.addEventListener('DOMContentLoaded', loadVideos);
    
    async function loadVideos() {
      try {
        const response = await fetch('/api/videos');
        allVideos = await response.json();
        
        const loadingSpinner = document.getElementById('loadingSpinner');
        const videosGrid = document.getElementById('videosGrid');
        const emptyState = document.getElementById('emptyState');
        
        loadingSpinner.style.display = 'none';
        
        if (allVideos.length === 0) {
          emptyState.style.display = 'block';
        } else {
          renderVideos(allVideos);
        }
      } catch (error) {
        console.error('Error loading videos:', error);
        showNotification('Failed to load videos', 'error');
      }
    }
    
    function renderVideos(videos) {
      const videosGrid = document.getElementById('videosGrid');
      
      if (videos.length === 0) {
        document.getElementById('emptyState').style.display = 'block';
        videosGrid.innerHTML = '';
        return;
      }
      
      document.getElementById('emptyState').style.display = 'none';
      
      videosGrid.innerHTML = videos.map(video => `
        <div class="video-card" data-title="${video.title.toLowerCase()}">
          <div class="video-thumbnail">
            🎬
          </div>
          <div class="video-info">
            <div class="video-title">${video.title}</div>
            <div class="video-meta">
              <span>${formatFileSize(video.fileSize)}</span>
              <span>${video.views} views</span>
            </div>
            <div class="video-actions">
              <button class="btn-small btn-view" onclick="viewVideo('${video.id}')">View</button>
              <button class="btn-small btn-delete" onclick="deleteVideo('${video.id}')">Delete</button>
            </div>
          </div>
        </div>
      `).join('');
    }
    
    function filterVideos() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const filteredVideos = allVideos.filter(video => 
        video.title.toLowerCase().includes(searchTerm) ||
        video.description.toLowerCase().includes(searchTerm)
      );
      renderVideos(filteredVideos);
    }
    
    function formatFileSize(bytes) {
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      if (bytes === 0) return '0 Bytes';
      const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
      return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
    }
    
    async function viewVideo(videoId) {
      try {
        const response = await fetch(`/api/videos/${videoId}`);
        const video = await response.json();
        
        // Create modal to view video
        const modal = document.createElement('div');
        modal.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0,0,0,0.9);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1000;
        `;
        
        modal.innerHTML = `
          <div style="background: white; padding: 2rem; border-radius: 15px; max-width: 800px; width: 90%;">
            <h2>${video.title}</h2>
            <video controls style="width: 100%; max-height: 400px; margin: 1rem 0;">
              <source src="${video.filePath.replace('uploads/', '/uploads/')}" type="${video.mimeType}">
              Your browser does not support the video tag.
            </video>
            <p><strong>Size:</strong> ${formatFileSize(video.fileSize)}</p>
            <p><strong>Views:</strong> ${video.views}</p>
            <p><strong>Uploaded:</strong> ${new Date(video.createdAt).toLocaleDateString()}</p>
            <button onclick="this.parentElement.parentElement.remove()" style="background: #667eea; color: white; border: none; padding: 0.5rem 1rem; border-radius: 5px; cursor: pointer; margin-top: 1rem;">Close</button>
          </div>
        `;
        
        modal.addEventListener('click', (e) => {
          if (e.target === modal) modal.remove();
        });
        
        document.body.appendChild(modal);
      } catch (error) {
        showNotification('Failed to load video', 'error');
      }
    }
    
    async function deleteVideo(videoId) {
      if (!confirm('Are you sure you want to delete this video?')) return;
      
      try {
        const response = await fetch(`/api/videos/${videoId}`, {
          method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (result.success) {
          showNotification('Video deleted successfully', 'success');
          // Reload videos
          allVideos = allVideos.filter(v => v.id !== videoId);
          renderVideos(allVideos);
        } else {
          showNotification('Failed to delete video', 'error');
        }
      } catch (error) {
        showNotification('Failed to delete video', 'error');
      }
    }
    
    // Notification system (reuse from index page)
    function showNotification(message, type = 'info') {
      const existing = document.querySelector('.notification');
      if (existing) existing.remove();
      
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.textContent = message;
      
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 1rem 1.5rem;
        border-radius: 10px;
        color: white;
        font-weight: 500;
        z-index: 1000;
        transform: translateX(100%);
        transition: transform 0.3s ease;
        max-width: 300px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.2);
      `;
      
      const colors = {
        success: 'linear-gradient(135deg, #10b981, #059669)',
        error: 'linear-gradient(135deg, #ef4444, #dc2626)',
        info: 'linear-gradient(135deg, #3b82f6, #2563eb)'
      };
      
      notification.style.background = colors[type] || colors.info;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.style.transform = 'translateX(0)';
      }, 100);
      
      setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => notification.remove(), 300);
      }, 4000);
    }
